// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/indexing-engine.git/pipeline (interfaces: PayloadFactory,Payload,Source,Sink,Stage,StageRunner,Task)

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pipeline "github.com/figment-networks/indexing-engine.git/pipeline"
	reflect "reflect"
)

// MockPayloadFactory is a mock of PayloadFactory interface
type MockPayloadFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadFactoryMockRecorder
}

// MockPayloadFactoryMockRecorder is the mock recorder for MockPayloadFactory
type MockPayloadFactoryMockRecorder struct {
	mock *MockPayloadFactory
}

// NewMockPayloadFactory creates a new mock instance
func NewMockPayloadFactory(ctrl *gomock.Controller) *MockPayloadFactory {
	mock := &MockPayloadFactory{ctrl: ctrl}
	mock.recorder = &MockPayloadFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayloadFactory) EXPECT() *MockPayloadFactoryMockRecorder {
	return m.recorder
}

// GetPayload mocks base method
func (m *MockPayloadFactory) GetPayload() pipeline.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].(pipeline.Payload)
	return ret0
}

// GetPayload indicates an expected call of GetPayload
func (mr *MockPayloadFactoryMockRecorder) GetPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockPayloadFactory)(nil).GetPayload))
}

// MockPayload is a mock of Payload interface
type MockPayload struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadMockRecorder
}

// MockPayloadMockRecorder is the mock recorder for MockPayload
type MockPayloadMockRecorder struct {
	mock *MockPayload
}

// NewMockPayload creates a new mock instance
func NewMockPayload(ctrl *gomock.Controller) *MockPayload {
	mock := &MockPayload{ctrl: ctrl}
	mock.recorder = &MockPayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayload) EXPECT() *MockPayloadMockRecorder {
	return m.recorder
}

// GetCurrentHeight mocks base method
func (m *MockPayload) GetCurrentHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight
func (mr *MockPayloadMockRecorder) GetCurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockPayload)(nil).GetCurrentHeight))
}

// MarkAsProcessed mocks base method
func (m *MockPayload) MarkAsProcessed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAsProcessed")
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed
func (mr *MockPayloadMockRecorder) MarkAsProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockPayload)(nil).MarkAsProcessed))
}

// SetCurrentHeight mocks base method
func (m *MockPayload) SetCurrentHeight(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentHeight", arg0)
}

// SetCurrentHeight indicates an expected call of SetCurrentHeight
func (mr *MockPayloadMockRecorder) SetCurrentHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentHeight", reflect.TypeOf((*MockPayload)(nil).SetCurrentHeight), arg0)
}

// MockSource is a mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// GetEndHeight mocks base method
func (m *MockSource) GetEndHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetEndHeight indicates an expected call of GetEndHeight
func (mr *MockSourceMockRecorder) GetEndHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndHeight", reflect.TypeOf((*MockSource)(nil).GetEndHeight))
}

// GetStartHeight mocks base method
func (m *MockSource) GetStartHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetStartHeight indicates an expected call of GetStartHeight
func (mr *MockSourceMockRecorder) GetStartHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartHeight", reflect.TypeOf((*MockSource)(nil).GetStartHeight))
}

// Run mocks base method
func (m *MockSource) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockSourceMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSource)(nil).Run), arg0)
}

// MockSink is a mock of Sink interface
type MockSink struct {
	ctrl     *gomock.Controller
	recorder *MockSinkMockRecorder
}

// MockSinkMockRecorder is the mock recorder for MockSink
type MockSinkMockRecorder struct {
	mock *MockSink
}

// NewMockSink creates a new mock instance
func NewMockSink(ctrl *gomock.Controller) *MockSink {
	mock := &MockSink{ctrl: ctrl}
	mock.recorder = &MockSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSink) EXPECT() *MockSinkMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockSink) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockSinkMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSink)(nil).Run), arg0)
}

// MockStage is a mock of Stage interface
type MockStage struct {
	ctrl     *gomock.Controller
	recorder *MockStageMockRecorder
}

// MockStageMockRecorder is the mock recorder for MockStage
type MockStageMockRecorder struct {
	mock *MockStage
}

// NewMockStage creates a new mock instance
func NewMockStage(ctrl *gomock.Controller) *MockStage {
	mock := &MockStage{ctrl: ctrl}
	mock.recorder = &MockStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStage) EXPECT() *MockStageMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockStage) Run(arg0 context.Context, arg1 pipeline.Payload, arg2 *pipeline.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockStageMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStage)(nil).Run), arg0, arg1, arg2)
}

// MockStageRunner is a mock of StageRunner interface
type MockStageRunner struct {
	ctrl     *gomock.Controller
	recorder *MockStageRunnerMockRecorder
}

// MockStageRunnerMockRecorder is the mock recorder for MockStageRunner
type MockStageRunnerMockRecorder struct {
	mock *MockStageRunner
}

// NewMockStageRunner creates a new mock instance
func NewMockStageRunner(ctrl *gomock.Controller) *MockStageRunner {
	mock := &MockStageRunner{ctrl: ctrl}
	mock.recorder = &MockStageRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStageRunner) EXPECT() *MockStageRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockStageRunner) Run(arg0 context.Context, arg1 pipeline.Payload, arg2 pipeline.TaskValidator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockStageRunnerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStageRunner)(nil).Run), arg0, arg1, arg2)
}

// MockTask is a mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockTask) Run(arg0 context.Context, arg1 pipeline.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockTaskMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTask)(nil).Run), arg0, arg1)
}
